repo的使用
repo的用法（zz)
repo只是google用Python脚本写的调用git的一个脚本，主要是用来下载、管理Android项目的软件仓库
1.repo help [ command ]   //显示command 的详细的帮助信息内容
   示例： repo help init 来获取 repo init 的其他用法
   
2.repo init -u URL 用以在当前目录安装 repository ，会在当前目录创建一个目录 ".repo"  -u 参数指定一个URL， 从这个URL 中取得repository 的 manifest 文件。
示例：repo init -u git://android.git.kernel.org/platform/manifest.git

获取的manifest文件放在.repo目录中。命名为manifest.xml。这个文件的内容其实就是所有被git管理的仓库的列表！

可以用 -m 参数来选择获取 repository 中的某一个特定的 manifest 文件，如果不具体指定，那么表示为默认的 namifest 文件 (default.xml)

repo init -u git://android.git.kernel.org/platform/manifest.git -m dalvik-plus.xml

(有诸多供我们选择的manifest文件，所有的manifest文件都放在目录.repo/manifests中，该目录本身亦被git所管理，你可以cd进去看看)

可以用 -b 参数来指定某个manifest 分支。

repo init -u git://android.git.kernel.org/platform/manifest.git -b release-1.0

你会发现.repo/manifests是个被git管理的仓库，这里放的是所有的manifest文件（*.xml），因为被git管理，固然有分支，-b可以切换到你想要的分支然后再下载相关的xml文件，
当然具体下载那个xml还要看-m参数了，所以如果你仅仅指定-b而没有-m的话，就是下载-b指定分支下的default.xml文件

如果不指定-b参数，那么会默认使用master分支

4. repo sync [project-list]
下载最新本地工作文件，更新成功，这本地文件和repository 中的代码是一样的。 可以指定需要更新的project ， 如果不指定任何参数，会同步整个所有的项目。

如果是第一次运行 repo sync ， 则这个命令相当于 git clone ，会把 repository 中的所有内容都拷贝到本地。 如果不是第一次运行 repo sync ， 
则相当于 git remote update ;  git rebase origin/branch .  repo sync 会更新 .repo 下面的文件。 如果在merge 的过程中出现冲突， 这需要手动运行  git  rebase --continue

5. repo update[ project-list ]

上传修改的代码 ，如果你本地的代码有所修改，那么在运行 repo sync 的时候，会提示你上传修改的代码，所有修改的代码分支会上传到 Gerrit (基于web 的代码review 系统), 
Gerrit 受到上传的代码，会转换为一个个变更，从而可以让人们来review 修改的代码。

6. repo diff [ project-list ]

        显示提交的代码和当前工作目录代码之间的差异。

7. repo download  target revision

        下载特定的修改版本到本地， 例如:  repo download pltform/frameworks/base 1241 下载修改版本为 1241 的代码

8. repo start newbranchname .

        创建新的branch分支。 "." 代表当前工作的branch 分支。

9.  repo prune [project list]

        删除已经merge 的 project

10. repo forall -c

这个命令会遍历所有的git仓库，并在每个仓库执行-c所指定的命令（这个被执行的命令就不限于仅仅是git命令了，而是任何被系统支持的命令，比如：ls 、 pwd 、cp 等等的 ）

当我想通过这个命令遍历所有的仓库并在每个仓库执行"git checkout . "用以将每个仓库的改动都清除的时候，我这么输入命令：

repo forall -c git checkout .

我发现这样根本不行。看来repo不能遍历执行checkout这个命令。今天我终于想到了另外一个命令"git reset --hard HEAD" 哈哈

repo forall -c git git reset --hard HEAD


再说一个新发现：以前用repo forall 执行一些命令的时候，可能再遍历到某个仓库的时候出了问题，但是我却苦于不知道这个仓库到底是哪个！一直也没有解决。今天终于找到了。。。。  关键时候还是要看命令自己带的帮助手册呀。。。

repo help forall  用这个命令查看下针对forall的帮助吧。说的很清楚，repo执行的时候加上-p参数就可以在遍历到每个仓库的时候先打印出当前的pwd，然后再继续执行-c所指定的命令。举例如下：


repo forall -p -c git branch   

 

//该命令会遍历所有仓库并打印每个仓库的分支情况，由于有了-p参数，这样便会打印出每个仓库的路径！！！
11. repo status

       显示 project 中每个仓库的状态，并打印仓库名称





Git常用命令-- git clone

命令说明: git clone命令在一个新创建的目录里克隆一个仓库，并创建
                 被克隆库中的每个分支的远程跟踪分支

命令格式:
git clone url #默认取出的是master分支
git clone url -b <branch> #会指定克隆后初始创建和取出的分支名。
git clone url [directory] #指定一个新的目录代替默认目录来克隆git库


Git常用命令-- git branch

命令说明：显示，创建，删除本地仓库分支。

命令格式：
git branch #显示本地仓库中已创建的本地分支。
git branch -r #显示本地仓库当前存在的远程分支。
git branch –a #显示所有分支
git branch -d/-D <branch> #删除branch/强制删除

注意：在当前分支下不能删除当前分支。

Git常用命令-- git checkout

命令说明：切换分支或者取出文件到本地工作 目录。

命令格式：
git checkout #
git checkout <path> #取出本地分支最新的文件到本地工作目录
git checkout <branch> #切换分支
git checkout -b <branch> [base] #创建分支并切换分支
git checkout -f <branch> #工作目录有修改的时候舍弃本地修改强制切      
                                          换分支。
git checkout --track <远程分支> #基于远程分支,创建一个被跟踪的本地
                                               分支

											   Git常用命令-- git add
     
命令说明：此命令把工作目录中当前的文件内容放到暂存区域里并
                  更新索引文件，为下次提交做准备。
git add命令是个多功能命令，根据目标文件的状态不同，此命令的效果
也不同；可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，
还能用于合并时把有冲突的文件标记为已解决状态等。
git add . 把当前目录下所有已修改文件和子目录放到暂存区中，此命
默认为递归操作。

命令格式：
git add  <file>...
git add  \*.txt 会匹配子目录
git add  *.txt 只匹配当前目录
git add -u ./ 只匹配当前目录modified状态的文件


Git常用命令-- git rm

命令说明：此命令用于从暂存区域和工作目录删除文件。

命令格式：
git rm <files>... 删除工作目录和本地仓库中的文件，在下次提交时生效
git rm -f <files>... 强制删除工作目录和本地仓库中的文件
git rm --cached <files>... 只把文件从本地仓库中删除，工作目录中还保
     存此文件。
git rm  \*~ 会递归匹配删除以“ ~”结尾的文件。
git rm  *~ 不加反斜杠是按照shell方式扩展，仅仅删除当前目录下的文  
                件而不会递归匹配删除。

				
Git常用命令-- git status

命令说明:
此命令用于显示工作目录的状态，主要内容如下：
显示暂存区和当前最新提交之间有不同的文件
显示暂存区和工作目录之间有不同的文件
显示工作目录中还没有被git跟踪管理的文件

命令格式：
git status

Git常用命令-- git log


命令说明：此命令用于显示本地仓库中已提交的信息，包括提交人，提
                  交时间，提交日志，提交对象等。

命令格式：
git log -n #显示最近n条日志信息。
git log filename #显示特定文件的log信息
git log --author=chenxinjie 查看某个人的提交记录
查看提交版本的信息，包括具体修改了哪些文件
git log --name-only



命令行查看两个版本修改的内容
git diff id1 id2

命令行查看两个版本修改文件名
git diff id1 id2 --stat



Git常用命令-- git commit

命令说明：此命令用于提交已修改/已删除/暂存区域当前的内容到本地
                  仓库。

命令格式：
git commit <file...> -m “注释”#只提交指定的文件，忽略暂存区内等待
                                               提交的文件。
git commit -am “注释” #提交当前所有的修改

注意:
       git每次提交都必须要有非空的提交日志，否则不能提交。

	   
Git常用命令-- git push

命令说明：把本地的分支或标签和其对应的文件内容推送到远程仓库， 
                  以分享给其他人使用。

命令格式：
git push origin <branch/tag> #把本地branch或者tag推送到远程仓库中
使用建议：在执行推送操作时，要指定本地分支名和远程分支名。

使用了review功能推送分支的命令格式如下：
git push <仓库远程名称> <本地分支名称>:refs/for/<远程分支名称>
git push origin master:refs/for/master
git push origin test1:refs/for/test1

Git常用命令-- git pull

命令说明：把远程仓库指定分支上更新的文件合并到本地仓库的当前分       
                  支。

命令格式：
git pull #把远程仓库更新的文件合并到本地当前分支并自动提交到本地     
             仓库中。
git pull <repository> <branch> #根据指定的远程名和远程分支名把远程仓库上更新的文件合并到本地当前分支并自动提交到本地仓库中

git pull命令相当于先后执行了git fetch和git merge两条命令，
所以git fetch和git merge的命令参数也适用于git pull命令。



Git常用命令-- git fetch

命令说明：从远程服务器仓库同步文件和其对应的分支和标签等信息到
                 本地。

命令格式：
git fetch  默认是更新远程仓库中所有信息



git add撤销当前目录下所有文件
git reset HEAD ./
git add撤销当前某个文件
git reset HEAD file

git commit 撤销
git reset commit_id

推送当前分支代码到develop分支
git push origin develop:refs/for/develop
git push


防止Ctrl+c退出终端回显异常和vpu没有正常退出，下次再编码异常


768代码下载步骤：
mkdir Polaris
cd Polaris
repo init -u ssh://chenxinjie@10.0.12.150:29418/Polaris/manifest.git -b develop
repo sync 
repo start --all develop
repo forall -c "git remote add origin ssh://10.0.12.150:29418/Polaris/$REPO_PROJECT.git $@"


提交代码步骤：
git add file
git ci -m "增加vcodec库的编译"
git push origin develop:refs/for/develop
git push




repo init -u ssh://chenxinjie@10.0.12.150:29418/Polaris/manifest.git -b sdk_vc0768
repo sync
// repo start --all sdk_vc0768

repo start sdk_vc0768 build
repo start sdk_vc0768 images
repo start sdk_vc0768 source/chip/vc0768/external/
repo start sdk_vc0768 source/chip/vc0768/internal/
repo start sdk_vc0768 source/clnt_build/external/
repo start sdk_vc0768 source/clnt_build/internal/
repo start sdk_vc0768 source/platform/vc0768
repo start sdk_vc0768 source/platform/vc0768_ae3200c
repo start sdk_vc0768 source/platform/vc0768_mcu
repo start sdk_vc0768 source/platform/vc0768_zynq
repo start sdk_vc0768 tools
repo start sdk_com    source/common/external/
repo start sdk_com    source/common/internal/

